// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/mozart/services/views/view_token.fidl";

// The factory for the StoryShell service enforces that only fully
// configured StoryShell service instances are created.
//
// The factory can only create a single instance so it can be
// implemented by a flutter app.
[ServiceName="modular.StoryShellFactory"]
interface StoryShellFactory {
  // The ViewOwner request is sent to the ViewProvider service, which
  // is separate because of flutter. This way, the story shell may be
  // implemented as a flutter app.
  Create(StoryContext story_context, StoryShell& request);
};

// This interface provides the StoryShell instance with everything it
// needs to know or be able to do about the Story. Not much right now,
// but we expect this to increase.
interface StoryContext {};

// Implemented by a Story Shell.
interface StoryShell {
  // Registers a new view to be displayed by the StoryShell. More
  // context that allows the story shell to decide how to layout will
  // be added later. Also, interface to influence life cycle and focus
  // is obviously missing.
  ConnectView(mozart.ViewOwner owner, uint64 view_id, uint64 parent_id, string type);

  // Signals to the StoryShell to tear down itself. Upon response the
  // caller terminates the StoryShell process if it hasn't done so
  // already.
  Terminate() => ();
};
