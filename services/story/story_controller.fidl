// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/link.fidl";
import "apps/modular/services/story/story_info.fidl";
import "apps/mozart/services/views/view_token.fidl";

// Used by the clients of StoryProvider (UserShell) to interact with a
// single story. Created by StoryProvider.
interface StoryController {
  // Gets information associated with the story.
  GetInfo() => (StoryInfo info);

  // Stores extra information associated with the story, like title,
  // color, etc. Available in the |extra| field in StoryInfo.
  SetInfoExtra(string name, string value) => ();

  // Runs the |Story| controlled by this |StoryController| instance if
  // not yet running or requested to start, else does nothing.
  // |view_owner| is an interface request for the view of the story
  // shell of this story. If Stop() requests are pending when this
  // request is issued, the request is queued until the Stop() request
  // completes.
  Start(mozart.ViewOwner& view_owner);

  // Gets a connection to the Link to the root module.
  GetLink(Link& link);

  // Gets a connection to the named Link in the story. The name of the
  // link to the root module is "root", and it's implicitly created
  // when the story is created. Any other link, if it doesn't exist
  // yet, is implicitly created.
  GetNamedLink(string name, Link& link);

  // Stops this story if it is running, else does nothing. Returns
  // when the story is stopped.
  Stop() => ();

  // Registers a listener for changes of the story state.
  Watch(StoryWatcher watcher);

  // Adds and starts a top level module to the story. The view of this
  // module is sent to the story shell. The Link to be used for the
  // module is identified by its name as used in calls to
  // GetNamedLink(); using that method, the link can be configured
  // with data before running the module. The implicit name of the
  // link obtained from GetLink() is "root". TODO(mesch): Some form of
  // ModuleController might be useful here, e.g. for status
  // notifications.
  AddModule(string url, string link_name);
};

// This interface is implemented by the client calling
// StoryController::Watch().
interface StoryWatcher {
  // Called with the current state right after registration, and
  // subsequently when the state changes.
  OnStateChange(StoryState new_state);
};
