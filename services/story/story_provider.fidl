// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/modular/services/story/story_controller.fidl";
import "apps/modular/services/story/story_state.fidl";

// UserRunner creates an instance of this service and passes it to the
// UserShell so it can operate on stories for the user.
//
// Closing |StoryProvider| has no effect on the state of the framework.
interface StoryProvider {
  // Creates a new story running the module at |url|. The returned
  // |story_id| can then be used to get a StoryController to perform
  // actions on the newly created story.
  CreateStory(string url) => (string story_id);

  // Like CreateStory, but with extra info and with values for the
  // root link atomically set. Otherwise, if SetInfoExtra() is called
  // separately on story controller, separate notifications are
  // generated, which is inconvenient.
  CreateStoryWithInfo(string url, map<string, string>? extra_info,
                      string? root_json) => (string story_id);

  // Deletes an existing story from the list of known stories. Returns
  // when the delete notification is received from the Ledger. If the
  // story to be deleted is running, it is first stopped and its story
  // controller disconnected. If the story ID doesn't exist, silently
  // does nothing.
  DeleteStory(string story_id) => ();

  // Requests detailed information about the given story. If the story
  // doesn't exist, returns null.
  GetStoryInfo(string story_id) => (StoryInfo? info);

  // Obtains a controller for a previously created story identified by
  // its story ID. Obtaining the controller doesn't run it yet. If the
  // story doesn't exist, the interface request is closed.
  GetController(string story_id, StoryController& story);

  // Returns IDs of known stories. More information about the stories
  // can be retrieved using GetStoryInfo(), or by GetController(),
  // then StoryController.GetInfo().
  PreviousStories() => (array<string> story_ids);

  // Returns IDs of stories on the current device that are not in the INITIAL or
  // STOPPED state. More information about the stories can be retrieved using
  // GetStoryInfo(), or by GetController(), then StoryController.GetInfo().
  RunningStories() => (array<string> story_ids);

  // Registers a listener for changes in the story collection.
  Watch(StoryProviderWatcher watcher);

  // Creates a duplicate handle for this StoryProvider.
  Duplicate(StoryProvider& request);
};

// This interface is implemented by clients of StoryProvider.
//
// OnChange() is called when a change to StoryInfo or StoryState is
// applied on the CURRENT device. The cause of the change to StoryInfo could
// have been ANY device, although the id of the device that caused the change is
// not part of the notification. StoryState changes are only sent for the
// CURRENT device. Notifications are not sent for changes to StoryState on other
// devices.
//
// OnDelete() is called when a story deletion operation is applied to the
// CURRENT device. The cause of the deletion could have been ANY device.
interface StoryProviderWatcher {
  // The StoryInfo changed or the StoryState changed. |story_state| is
  // INITIAL if this story was just created. The state will always be "STOPPED"
  // on the current device if no StoryController is present. This behavior is
  // only surprising because the state could change to INITIAL after the
  // StoryController is created.
  // TODO(jimbe) The "INITIAL" value has a race condition between devices and
  // should be removed.
  OnChange(StoryInfo story_info, StoryState story_state);

  // A Story was deleted.
  OnDelete(string story_id);
};
