// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "application/services/service_provider.fidl";
import "apps/modular/services/component/component_context.fidl";
import "apps/modular/services/story/link.fidl";
import "apps/modular/services/module/module_controller.fidl";
import "apps/mozart/services/views/view_token.fidl";

// This interface is exposed to all modules in a story. It allows to
// create Link instances and run Module instances.
interface ModuleContext {
  // Creates a new Link instance. The Link instance can be shared with
  // a newly created Module by passing it to StartModule(). In order
  // to also retain a reference to the same Link instance, a duplicate
  // must be created using the Dup() method of Link.
  //
  // The link instance has a name so that it can be recognized when
  // the story is restored. Right now it's up to the module to
  // ensure the name is unique within the scope of the story.
  //
  // TODO(mesch): We can scope it to the module, or the Link instance
  // the module was initialized with, or both, but two things are
  // tricky when done naively:
  //
  //   1. the initial Link might not be unique to this module
  //      instance,
  //
  //   2. obtaining the name of a parent link would be asynchronous.
  //
  // For now, the name is scoped to the story.
  CreateLink(string name, Link& link);

  // Starts a new module. The module is identified by the URL of the
  // application executable. (In the future, such a URL might be
  // obtained, for example, from a specification of a data schema the
  // module can provide or consume through a resolver service provided
  // to the module separately. The parameter provided may eventually
  // also identify a component within an application rather than just
  // an application.) The calling module and the new module may also
  // interact by exchanging ServiceProviders. The calling module may
  // provide its |outgoing_services|, and the new module may implement
  // |incoming_services|, if an interface request is supplied.
  StartModule(string module_url, Link link,
              app.ServiceProvider? outgoing_services,
              app.ServiceProvider&? incoming_services,
              ModuleController& module_controller,
              mozart.ViewOwner& view_owner);

  // Like StartModule(), but the view of the newly started module is
  // sent to the story shell for display.
  StartModuleInShell(string module_url, Link link,
                     app.ServiceProvider? outgoing_services,
                     app.ServiceProvider&? incoming_services,
                     ModuleController& module_controller,
                     string view_type);

  // Gets the ComponentContext associated with this module. This
  // component context is unique to this particular module instance.
  GetComponentContext(ComponentContext& context_request);

  // Get story id for this story which may be used to create a
  // suggestion proposal to reinflate this story.
  GetStoryId() => (string story_id);

  // The module holding this handle to the ModuleContext declares it's
  // ready to run. The module context implementation notifies all
  // ModuleWatchers registered on the ModuleController by calling
  // OnStateChange(). See ModuleState for all states and transitions.
  Ready();

  // The module holding this handle to the ModuleContext declares it's
  // done and wants to be torn down. The module context implementation
  // notifies all ModuleWatchers registered on the ModuleController by
  // calling OnStateChange(). The receiver is free to decide whether
  // it's appropriate to Stop() the module. (It might be appropriate
  // for the receiver to call Done() on its own instead.) See
  // ModuleState for all states and transitions.
  Done();
};
