// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "application/services/service_provider.fidl";
import "apps/maxwell/services/user/intelligence_services.fidl";
import "apps/modular/services/component/component_context.fidl";
import "apps/modular/services/story/link.fidl";
import "apps/modular/services/module/module_controller.fidl";
import "apps/mozart/services/views/view_token.fidl";

// This interface is exposed to all modules in a story. It allows to
// create Link instances and run Module instances.
interface ModuleContext {
  // Creates a new Link instance. The Link instance can be shared with
  // a newly created Module instance by passing it to StartModule().
  // In order to also retain a reference to the same Link instance, a
  // duplicate must be created using the Dup() method of Link.
  //
  // The link instance has a name so that it can be recognized when
  // the story is resumed. The name is unique in the scope of the
  // Module instance. If the method is called again by the same Module
  // instance, a new connection to the same Link instance is obtained.
  // It's up to the Module instance to ensure the name is unique
  // within the scope of itself.
  CreateLink(string name, Link& link);

  // Starts a new Module instance. The Module to execute is identified
  // by the URL of the application executable, and the Module instance
  // is given a |name| in the scope of the starting Module instance.
  // The |name|, together with the names of all ancestor modules, is
  // used to identify existing component message queues and links when
  // the Story is resumed.
  //
  // TODO(mesch): If the method is called again with the same name by
  // the same Module instance, the existing Module instance should be
  // restarted with the changed URL if applicable (or stopped), but
  // right now it isn't, and a duplicate Module instance with the same
  // name is created.
  //
  // The calling Module instance and the new Module instance may also
  // interact by exchanging ServiceProviders. The calling Module
  // instance may provide its |outgoing_services|, and the new Module
  // instance may implement |incoming_services|, if an interface
  // request is supplied.
  StartModule(string name, string module_url, Link link,
              app.ServiceProvider? outgoing_services,
              app.ServiceProvider&? incoming_services,
              ModuleController& module_controller,
              mozart.ViewOwner& view_owner);

  // Like StartModule(), but the view of the newly started module is
  // sent to the story shell for display.
  StartModuleInShell(string name, string module_url, Link link,
                     app.ServiceProvider? outgoing_services,
                     app.ServiceProvider&? incoming_services,
                     ModuleController& module_controller,
                     string view_type);

  // Gets the ComponentContext instance associated with this Module
  // instance. This ComponentContext instance is unique to this
  // particular Module instance.
  GetComponentContext(ComponentContext& context_request);

  // Gets the IntelligenceServices service vendor associated with this
  // module.
  GetIntelligenceServices(maxwell.IntelligenceServices& request);

  // Gets the id for this story which may be used to create a
  // suggestion proposal to resume this story.
  GetStoryId() => (string story_id);

  // The Module instance holding this handle to the ModuleContext
  // declares it's ready to run. The module context implementation
  // notifies all ModuleWatchers registered on the ModuleController by
  // calling OnStateChange(). See ModuleState for all states and
  // transitions.
  Ready();

  // The Module instance holding this handle to the ModuleContext
  // declares it's done and wants to be torn down. The module context
  // implementation notifies all ModuleWatchers registered on the
  // ModuleController by calling OnStateChange(). The receiver is free
  // to decide whether it's appropriate to Stop() the module. (It
  // might be appropriate for the receiver to call Done() on its own
  // instead.) See ModuleState for all states and transitions.
  Done();
};
