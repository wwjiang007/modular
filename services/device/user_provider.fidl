// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "apps/mozart/services/views/view_token.fidl";

// Given to the device shell UI so it can provide user information to
// the device runner.
//
// The name is analog to StoryProvider, which is given to UserShell so
// it can act on stories. Conceptually, it provides the device shell
// with information about the users that can login here (even though
// it doesn't do this right now) in the same way as StoryProvider
// provides the user shell with stories to start here.
interface UserProvider {
  // Adds authentication information of a Ledger user to this device.
  // |password| is nullable for ease of development.
  // |devicename| is the user provided name for this device.
  // |servername| is the remote server used to sync a user's Ledger.
  AddUser(string username, string? password, string devicename,
          string servername);

  // Passes in the user authentication information from the lockscreen or shell.
  // |view_owner| is the view given to the UserShell.
  // If authentication fails, |user_controller| is closed.
  // NOTE: |auth_token| is a temporary way to provide authentication tokens to
  // email agent.
  Login(string username, string? password, string? auth_token,
        mozart.ViewOwner& view_owner, UserController& user_controller);

  // List of all users who have authenticated to this device in the past.
  PreviousUsers() => (array<string> users);
};

// Provided by DeviceRunner, provided to DeviceShell. This interface provides
// control to a logged-in user's life cycle, and the life of this interface is
// bound to a user being logged in.
// Similar to this interface is UserContext, which is provided to the UserShell
// and also contains a mechanism to invoke a logout. (For now, this distinction
// exists because we want a way for the UserShell to also logout, but not
// provide the entire UserController).
interface UserController {
  // Logs out a user by triggering a tear-down. Returns once the UserRunner has
  // torn down. This will trigger OnLogout for |UserWatcher|s.
  Logout() => ();

  // Registers a watcher for the user's life cycle events.
  Watch(UserWatcher watcher);
};

// Implemented by whoever wants to watch the user's life-cycle (mostly just
// DeviceShell). The DeviceRunner invokes |UserWatcher|s on events.
interface UserWatcher {
  // Called when a user has logged out. By the time this event is processed by
  // a watcher, the UserRunner may already be torn down.
  // TODO(vardhan): Make a guarantee that once OnLogout() is emitted, it is
  // possible to UserProvider.Login() the same user.
  OnLogout();
};
